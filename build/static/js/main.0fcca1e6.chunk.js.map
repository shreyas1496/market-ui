{"version":3,"sources":["firebase.js","components/notify.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","messaging","Notify","setToken","useState","enabled","setEnabled","onEnabled","useCallback","getToken","then","token","catch","err","console","log","FormControlLabel","control","Checkbox","checked","onChange","name","label","columns","key","cell","row","style","backgroundColor","ltp","prevClose","App","sortOn","setSortOn","useFetch","loading","error","data","post","data2","useMemo","int","map","closeNess","Math","abs","_get","_orderBy","todo","id","setInterval","Date","now","clearInterval","useEffect","className","padding","value","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fcca1e6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport \"firebase/analytics\";\n\nconst config = {\n  apiKey: \"AIzaSyAMa3AxZtC7telPQ5brHaHWodZaoG5d8r0\",\n  authDomain: \"quickynotify.firebaseapp.com\",\n  projectId: \"quickynotify\",\n  storageBucket: \"quickynotify.appspot.com\",\n  messagingSenderId: \"960543983205\",\n  appId: \"1:960543983205:web:65c7260dc369d72c71e88c\",\n  measurementId: \"G-5LVNTZHCYL\",\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  firebase.analytics();\n}\n\nexport default firebase;\n","import FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useCallback,\n  useState,\n} from \"react\";\nimport firebase from \"../firebase\";\n\ninterface Props {\n  setToken: (token: string) => void;\n  className?: string;\n}\n\nconst messaging = firebase.messaging();\n\nexport const Notify: FunctionComponent<Props> = ({\n  setToken,\n}): ReactElement => {\n  const [enabled, setEnabled] = useState(false);\n\n  const onEnabled = useCallback(() => {\n    messaging\n      .getToken()\n      .then((token) => {\n        setEnabled(true);\n        setToken(token);\n      })\n      .catch((err) => {\n        console.log(err);\n        setEnabled(false);\n      });\n  }, [setToken]);\n\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <Checkbox checked={enabled} onChange={onEnabled} name=\"checkedA\" />\n        }\n        label=\"Notifications\"\n      />\n      {/* <div>{token}</div> */}\n    </>\n  );\n};\n","import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport useFetch from \"use-http\";\nimport { orderBy as _orderBy, get as _get } from \"lodash\";\nimport { Notify } from \"./components\";\n\nconst columns = [\n  { key: \"name\", label: \"Name\" },\n  { key: \"prevClose\", label: \"Prev Close\" },\n  {\n    key: \"ltp\",\n    label: \"ltp\",\n    cell: (row: any) => (\n      <div\n        style={{ backgroundColor: row.ltp > row.prevClose ? \"green\" : \"red\" }}\n      >\n        {row.ltp}\n      </div>\n    ),\n  },\n  { key: \"movingAverageValues[0].value\", label: \"44 - avg\" },\n  { key: \"movingAverageValues[0].leads\", label: \"44 - leads\" },\n  { key: \"movingAverageValues[1].value\", label: \"20 - avg\" },\n  { key: \"movingAverageValues[1].leads\", label: \"20 - leads\" },\n  { key: \"movingAverageValues[2].value\", label: \"10 - avg\" },\n  { key: \"movingAverageValues[2].leads\", label: \"10 - leads\" },\n];\n\nfunction App() {\n  const [sortOn, setSortOn] = useState(\"0\");\n  const [token, setToken] = useState(\"\");\n  const {\n    loading,\n    error,\n    data = [],\n    post,\n  } = useFetch(\"https://shreyas1496.tech/market-api/data\", {}, []);\n\n  const data2 = useMemo(() => {\n    const int = data.map((row: any) => {\n      const closeNess =\n        Math.abs(row.ltp - _get(row, `movingAverageValues[${sortOn}].value`)) /\n        row.ltp;\n      return { ...row, closeNess };\n    });\n\n    return _orderBy(int, `closeNess`, \"asc\");\n  }, [sortOn, data]);\n\n  const todo = useCallback(() => {\n    const id = setInterval(\n      () => post(`?date=${Date.now()}`, { \"fcm-token\": token }),\n      20000\n    );\n    return () => clearInterval(id);\n  }, [token, post]);\n\n  useEffect(todo, [todo]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Notify setToken={setToken} />\n        <select\n          style={{ padding: \"20px\" }}\n          value={sortOn}\n          onChange={(e) => setSortOn(e.target.value)}\n        >\n          <option value=\"0\">44</option>\n          <option value=\"1\">20</option>\n          <option value=\"2\">10</option>\n        </select>\n      </header>\n      <section className=\"tables\">\n        {error && \"Error!\"}\n        {loading && \"Loading...\"}\n        <table>\n          <thead>\n            <tr>\n              {columns.map(({ key, label }) => (\n                <th key={key}>{label}</th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {data2.map((row) => (\n              <tr key={row.name}>\n                {columns.map(({ key, cell }) => (\n                  <td key={key}>{cell ? cell(row) : _get(row, key)}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}