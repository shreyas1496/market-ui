{"version":3,"sources":["firebase.js","components/notify.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","messaging","onMessage","payload","console","log","Notification","notification","title","body","Notify","setToken","permission","useState","enabled","setEnabled","onEnabled","useCallback","getToken","then","token","catch","err","useEffect","FormControlLabel","control","Checkbox","checked","onChange","name","label","columns","key","cell","row","style","backgroundColor","ltp","prevClose","App","sortOn","setSortOn","search","setSearch","useFetch","loading","error","data","post","data2","useMemo","int","filter","includes","toUpperCase","map","closeNess","Math","abs","_get","_orderBy","todo","id","setInterval","Date","now","clearInterval","className","Select","value","e","target","TextField","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.5ab7cb43.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport \"firebase/analytics\";\n\nconst config = {\n  apiKey: \"AIzaSyAMa3AxZtC7telPQ5brHaHWodZaoG5d8r0\",\n  authDomain: \"quickynotify.firebaseapp.com\",\n  projectId: \"quickynotify\",\n  storageBucket: \"quickynotify.appspot.com\",\n  messagingSenderId: \"960543983205\",\n  appId: \"1:960543983205:web:65c7260dc369d72c71e88c\",\n  measurementId: \"G-5LVNTZHCYL\",\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  firebase.analytics();\n}\n\nexport default firebase;\n","import FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport firebase from \"../firebase\";\n\ninterface Props {\n  setToken: (token: string) => void;\n  className?: string;\n}\n\nconst messaging = firebase.messaging();\n\nmessaging.onMessage((payload) => {\n  console.log(\"Message received. \", payload);\n  new Notification(payload.notification.title, {\n    body: payload.notification.body,\n  });\n});\n\nexport const Notify: FunctionComponent<Props> = ({\n  setToken,\n}): ReactElement => {\n  const permission = Notification.permission;\n  const [enabled, setEnabled] = useState(permission === \"granted\");\n\n  const onEnabled = useCallback(() => {\n    messaging\n      .getToken()\n      .then((token) => {\n        setEnabled(true);\n        setToken(token);\n      })\n      .catch((err) => {\n        console.log(err);\n        setEnabled(false);\n      });\n  }, [setToken]);\n\n  useEffect(() => {\n    if (permission === \"granted\") {\n      onEnabled();\n    }\n  }, [permission, onEnabled]);\n\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <Checkbox checked={enabled} onChange={onEnabled} name=\"checkedA\" />\n        }\n        label=\"Notifications\"\n      />\n    </>\n  );\n};\n","import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport useFetch from \"use-http\";\nimport { orderBy as _orderBy, get as _get } from \"lodash\";\nimport { Notify } from \"./components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\n\nconst columns = [\n  { key: \"name\", label: \"Name\" },\n  { key: \"prevClose\", label: \"Prev Close\" },\n  {\n    key: \"ltp\",\n    label: \"ltp\",\n    cell: (row: any) => (\n      <div\n        style={{ backgroundColor: row.ltp > row.prevClose ? \"green\" : \"red\" }}\n      >\n        {row.ltp}\n      </div>\n    ),\n  },\n  { key: \"movingAverageValues[0].value\", label: \"44 - avg\" },\n  { key: \"movingAverageValues[0].leads\", label: \"44 - leads\" },\n  { key: \"movingAverageValues[1].value\", label: \"20 - avg\" },\n  { key: \"movingAverageValues[1].leads\", label: \"20 - leads\" },\n  { key: \"movingAverageValues[2].value\", label: \"10 - avg\" },\n  { key: \"movingAverageValues[2].leads\", label: \"10 - leads\" },\n];\n\nfunction App() {\n  const [sortOn, setSortOn] = useState(\"0\");\n  const [token, setToken] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const {\n    loading,\n    error,\n    data = [],\n    post,\n  } = useFetch(\"https://shreyas1496.tech/market-api/data\", {}, []);\n\n  const data2 = useMemo(() => {\n    const int = data\n      // @ts-ignore\n      .filter(({ name }) => {\n        console.log(name);\n\n        return search ? name.includes(search.toUpperCase()) : true;\n      })\n      .map((row: any) => {\n        const closeNess =\n          Math.abs(\n            row.ltp - _get(row, `movingAverageValues[${sortOn}].value`)\n          ) / row.ltp;\n        return { ...row, closeNess };\n      });\n\n    return _orderBy(int, `closeNess`, \"asc\");\n  }, [sortOn, data, search]);\n\n  const todo = useCallback(() => {\n    const id = setInterval(\n      () => post(`?date=${Date.now()}`, { \"fcm-token\": token }),\n      20000\n    );\n    return () => clearInterval(id);\n  }, [token, post]);\n\n  useEffect(todo, [todo]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Notify setToken={setToken} />\n        <Select\n          value={sortOn}\n          onChange={(e) => setSortOn(e.target.value as string)}\n        >\n          <option value=\"0\">44</option>\n          <option value=\"1\">20</option>\n          <option value=\"2\">10</option>\n        </Select>\n        <TextField\n          label=\"Filter\"\n          onChange={(e) => setSearch(e.target.value)}\n          value={search}\n        />\n      </header>\n      <section className=\"tables\">\n        {error && \"Error!\"}\n        {loading && \"Loading...\"}\n\n        <table>\n          <thead>\n            <tr>\n              {columns.map(({ key, label }) => (\n                <th key={key}>{label}</th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {data2.map((row) => (\n              <tr key={row.name}>\n                {columns.map(({ key, cell }) => (\n                  <td key={key}>{cell ? cell(row) : _get(row, key)}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport createMuiTheme from \"@material-ui/core/styles/createTheme\";\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}