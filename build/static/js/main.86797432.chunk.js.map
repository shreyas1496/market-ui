{"version":3,"sources":["firebase.js","components/notify.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","messaging","Notify","useState","enabled","setEnabled","token","setToken","onEnabled","useCallback","getToken","then","catch","err","console","log","FormControlLabel","control","Checkbox","checked","onChange","name","label","JsonTable","require","cvt","prefix","avg","ltp","close","Math","round","abs","App","sortOn","setSortOn","useFetch","loading","error","data","get","data2","useMemo","int","map","prevClose","ma44","ma20","ma10","_orderBy","useEffect","id","setInterval","Date","now","clearInterval","className","style","padding","value","e","target","rows","columns","key","cell","row","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86797432.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport \"firebase/analytics\";\n\nconst config = {\n  apiKey: \"AIzaSyAMa3AxZtC7telPQ5brHaHWodZaoG5d8r0\",\n  authDomain: \"quickynotify.firebaseapp.com\",\n  projectId: \"quickynotify\",\n  storageBucket: \"quickynotify.appspot.com\",\n  messagingSenderId: \"960543983205\",\n  appId: \"1:960543983205:web:65c7260dc369d72c71e88c\",\n  measurementId: \"G-5LVNTZHCYL\",\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  firebase.analytics();\n}\n\nexport default firebase;\n","import FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport React, {FunctionComponent, ReactElement, useCallback, useState} from \"react\";\nimport firebase from '../firebase';\n\ninterface Props {\n    className?: string\n}\n\nconst messaging = firebase.messaging()\n\nexport const Notify: FunctionComponent<Props> = (): ReactElement => {\n\n    const [enabled, setEnabled] = useState(false);\n    const [token, setToken] = useState('');\n\n    const onEnabled = useCallback(() => {\n        messaging.getToken().then(token=>{\n            setEnabled(true);\n            setToken(token)\n          }).catch((err)=>{\n            console.log(err);\n            setEnabled(false);\n          })\n    }, [])\n\n    return (\n        <>\n        <FormControlLabel\n        control={<Checkbox checked={enabled} onChange={onEnabled} name=\"checkedA\" />}\n        label=\"Notifications\"\n      />\n      <div>{token}</div>\n      </>\n    )\n\n}","import React, { useState, useMemo, useEffect } from 'react';\nimport './App.css';\nimport useFetch from 'use-http';\nimport { orderBy as _orderBy } from 'lodash';\nimport { Notify } from './components';\n// @ts-ignore\nconst JsonTable = require('ts-react-json-table');\n\n// @ts-ignore\nfunction cvt(prefix, avg, ltp) {\n  const close = Math.round((Math.abs(avg - ltp) / ltp) * 100) / 100;\n  return {\n    [`${prefix}-avg`]: Math.round(avg * 100) / 100,\n    [`${prefix}-close`]: close,\n  };\n}\n\nfunction App() {\n  const [sortOn, setSortOn] = useState('44');\n  const {\n    loading, error, data = [], get,\n  } = useFetch('https://shreyas1496.tech/market-api/data', {}, []);\n\n  const data2 = useMemo(() => {\n    const int = data.map(({\n      // @ts-ignore\n      name, prevClose, ltp, ma44, ma20, ma10,\n    }) => ({\n      name, prevClose, ltp, ...cvt('44', ma44, ltp), ...cvt('20', ma20, ltp), ...cvt('10', ma10, ltp),\n    }));\n\n    return _orderBy(int, `${sortOn}-close`, 'asc');\n  }, [sortOn, data]);\n\n  useEffect(() => {\n    const id = setInterval(() => get(`?date=${Date.now()}`), 20000);\n    return () => clearInterval(id);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Notify />\n        <select style={{ padding: '20px' }} value={sortOn} onChange={(e) => setSortOn(e.target.value)}>\n          <option value=\"44\">44</option>\n          <option value=\"20\">20</option>\n          <option value=\"10\">10</option>\n        </select>\n      </header>\n      <section className=\"tables\">\n        {error && 'Error!'}\n        {loading && 'Loading...'}\n        <JsonTable className=\"tables\" rows={data2} columns={['name', 'prevClose', { key: 'ltp', label: 'ltp', cell: (row: any) => <span style={{ backgroundColor: row.ltp > row.prevClose ? 'green' : 'red' }}>{row.ltp}</span> }, '44-avg', '20-avg', '10-avg']} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}